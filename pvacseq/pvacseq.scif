#
# # python2
#

%appenv python2
    /bin/bash -c "source activate /scif/apps/python2"

%appinstall python2
    /opt/conda/bin/conda create -y -p $SCIF_APPROOT python=2.7


#
# # pvacseq
#

%apphelp pvacseq
    This is the primary entrypoint for interaction with the container tools!
    You can interactively shell in like:
        singularity run pvacseq shell pvacseq
        docker run -it vanessa/sherlock:pvacseq shell pvacseq

%appinstall pvacseq
    /opt/conda/bin/conda create -y -p $SCIF_APPROOT python=3.6
    /bin/bash -c "source activate /scif/apps/pvacseq"
    pip install pvacseq
    pvacseq download_example_data $SCIF_APPDATA
    mkdir -p $SCIF_APPDATA/test_output

    # Paths for tests are wrong
    sed -i 's#tests/test_data/pvacseq/#/scif/data/pvacseq/example_data/#g' /scif/data/pvacseq/example_data/additional_input_file_list.yaml
    /bin/bash -c "source deactivate"
    
%apprun pvacseq
    source activate /scif/apps/pvacseq
    python "$@"
    source deactivate

%apphelp pvacseq-test
    You should run this application with an output directory to see the
    output files.
       singularity run pvacseq run pvacseq-test /scratch/users/vsochat/output


%apprun pvacseq-test
    /bin/bash -c "source activate /scif/apps/pvacseq"

    # If no arguments provided, use default data output
    if [ $# -eq 0 ]; then
        OUTDIR=/scif/data/pvacseq/test_output
    else
        OUTDIR="$1"
    fi

    pvacseq run /scif/data/pvacseq/example_data/input.vcf Test HLA-G*01:09,HLA-E*01:01,H2-IAb \
            NetMHC PickPocket NNalign $OUTDIR \
            -e 9,10 \
            -i /scif/data/pvacseq/example_data/additional_input_file_list.yaml --tdna-vaf 20 \
            --net-chop-method cterm --netmhc-stab \
            --top-score-metric=lowest -d full --keep-tmp-files
    source deactivate

#
# # PVAC-Tools 
# http://pvactools.readthedocs.io/en/latest/install.html
#

%appinstall pvactools
    /bin/bash -c "source activate /scif/apps/pvacseq"
    pip install pvactools
    pvactools download_cwls /scif/data/pvacqseq
    /bin/bash -c "source deactivate"

#
# # Variant Effect Predictor (VEP) Command Line Tool
#

%appenv VEP
    PERL_MM_USE_DEFAULT=1
    export PERL_MM_USE_DEFAULT

%appinstall VEP
    /bin/bash -c "source activate /scif/apps/pvacseq"
    apt-get install -y cpanminus
    export PERL_MM_USE_DEFAULT=1
    cpan App::cpanminus
    cpanm Archive::Zip
    cpanm BioPerl
    cpanm DBI
    cpanm DBD::mysql

    git clone https://github.com/Ensembl/ensembl-vep.git
    cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)
    cd ensembl-vep
    perl INSTALL.pl -a a --NO_TEST
    cpanm Bio::Root::Version

    # VEP_plugins (all of them!)
    perl INSTALL.pl -a p -g Downstream,miRNA
    /bin/bash -c "source deactivate"

 
%appinstall VEP_plugins
    /bin/bash -c "source activate /scif/apps/pvacseq"
    cd ..
    git clone https://github.com/Ensembl/VEP_plugins.git && cd VEP_plugins
    pvacseq install_vep_plugin ${SCIF_APPROOT}  
    /bin/bash -c "source deactivate"

#
# # MHC Class I
# 

%appinstall mhc_i
    /bin/bash -c "source activate /scif/apps/python2"
    wget http://downloads.iedb.org/tools/mhci/LATEST/IEDB_MHC_I-2.17.tar.gz && \
    tar -xzf IEDB_MHC_I-2.17.tar.gz && mv mhc_i/* $SCIF_APPROOT && rmdir mhc_i
    ./configure && \
    python src/predict_binding.py
    /bin/bash -c "source deactivate"

%apprun mhc_i
    python "$@"
    source deactivate

%appenv mhc_i
    source activate /scif/apps/python2

#
# # MHC Class II
# 

%appinstall mhc_ii
    /bin/bash -c "source activate /scif/apps/python2"
    wget http://downloads.iedb.org/tools/mhcii/LATEST/IEDB_MHC_II-2.17.3.tar.gz && \
    tar -xzf IEDB_MHC_II-2.17.3.tar.gz && mv mhc_ii/* $SCIF_APPROOT && rmdir mhc_ii
    python configure.py
